"use strict";const o=require("electron"),P=require("node:os"),w=require("node:path"),p=require("path"),m=require("dockerode"),{exec:g}=require("child_process"),E=require("archiver"),u=require("fs");process.env.DIST_ELECTRON=w.join(__dirname,"..");process.env.DIST=w.join(process.env.DIST_ELECTRON,"../dist");process.env.PUBLIC=process.env.VITE_DEV_SERVER_URL?w.join(process.env.DIST_ELECTRON,"../public"):process.env.DIST;P.release().startsWith("6.1")&&o.app.disableHardwareAcceleration();process.platform==="win32"&&o.app.setAppUserModelId(o.app.getName());o.app.requestSingleInstanceLock()||(o.app.quit(),process.exit(0));let a=null;const h=w.join(__dirname,"../preload/index.js"),v=process.env.VITE_DEV_SERVER_URL,k=w.join(process.env.DIST,"index.html");async function D(){a=new o.BrowserWindow({title:"NodeFlow",icon:w.join(process.env.PUBLIC,"favicon.ico"),width:1200,height:750,webPreferences:{preload:h,nodeIntegration:!0,contextIsolation:!1}}),a.setMenu(null),a.setOpacity(1),process.env.VITE_DEV_SERVER_URL?(a.loadURL(v),a.webContents.openDevTools()):a.loadFile(k),a.webContents.on("did-finish-load",()=>{a==null||a.webContents.send("main-process-message",new Date().toLocaleString())}),a.webContents.setWindowOpenHandler(({url:n})=>(n.startsWith("https:")&&o.shell.openExternal(n),{action:"deny"}))}o.app.whenReady().then(D);o.app.on("window-all-closed",()=>{a=null,process.platform!=="darwin"&&o.app.quit()});o.app.on("second-instance",()=>{a&&(a.isMinimized()&&a.restore(),a.focus())});o.app.on("activate",()=>{const n=o.BrowserWindow.getAllWindows();n.length?n[0].focus():D()});async function I(n){const{canceled:e,filePath:i}=await o.dialog.showSaveDialog(o.BrowserWindow.getFocusedWindow(),{properties:["createDirectory"]});return e?new Promise((t,r)=>{t(!1)}):new Promise((t,r)=>{u.writeFileSync(i,n),t(!0)})}o.ipcMain.on("save-file",async(n,e)=>await I(e));async function j(n){const{canceled:e,filePath:i}=await o.dialog.showSaveDialog(o.BrowserWindow.getFocusedWindow(),{properties:["createDirectory"]});if(e)return new Promise((t,r)=>{t(!1)});{const t=p.join(o.app.getAppPath(),n),r=E("zip",{zlib:{level:9}}),l=u.createWriteStream(i);return new Promise((s,d)=>{r.directory(t,!1).on("error",c=>d(c)).pipe(l),l.on("close",()=>s(!0)),r.finalize()})}}o.ipcMain.handle("export-results",async(n,e)=>await j(e));function R(n){return new Promise((e,i)=>{u.readFile(n,"utf8",(t,r)=>{t||e(r)})})}o.ipcMain.handle("load-workflow-from-file",async(n,e)=>await R(e));function _(){return new Promise((n,e)=>{new m().listContainers(function(t,r){n(!t)})})}o.ipcMain.handle("is-docker-available",async(n,...e)=>await _());function S(){return new Promise((n,e)=>{const i=new m;i.pull("ocrd/all:maximum",function(t,r){i.modem.followProgress(r,l,s);function l(d,c){d||n(!0)}function s(d){if(d.progressDetail!==void 0){const c=d.progressDetail;if(c.current!==void 0&&c.total!==void 0){const f=Math.round(c.total/c.current);console.log(f)}}}})})}o.ipcMain.handle("pull-ocrd-docker-image",async(n,e)=>await S());function W(n){return new Promise((e,i)=>{const t=`docker run --rm -v ${p.join(o.app.getAppPath(),n.workspace)}:/data -w /data -- ocrd/all:maximum ${n.processString}`;g(t,(r,l,s)=>{r&&(console.log(`error: ${r.message}`),e(!1)),s&&(console.log(`stderr: ${s}`),e(!1)),e(!0)})})}o.ipcMain.handle("launch-workflow",async(n,e)=>await W(e));o.ipcMain.on("open-docker-setup-guide",(n,...e)=>{require("electron").shell.openExternal("https://docs.docker.com/get-docker/")});async function M(){const{canceled:n,filePaths:e}=await o.dialog.showOpenDialog(o.BrowserWindow.getFocusedWindow(),{properties:["openDirectory"]});if(!n)return new Promise((i,t)=>{i(e[0])})}o.ipcMain.handle("get-directory",async(n,e)=>await M());function x(n){return new Promise((e,i)=>{u.mkdirSync(n),u.mkdirSync(p.join(n,"OCR-D-IMG"));const t=`docker run --rm -v ${n}:/data -w /data -- ocrd/all:maximum ocrd workspace -d /data init`;g(t,(r,l,s)=>{r&&(console.log(`error: ${r.message}`),e(!1)),s&&(console.log(`stderr: ${s}`),s.includes("Writing METS to /data/mets.xml")||e(!1)),console.log(`stdout: ${l}`),e(!0)})})}o.ipcMain.handle("init-ocrd-workspace",async(n,e)=>await x(p.join(o.app.getAppPath(),e)));function T(n,e){return new Promise((i,t)=>{const r=p.join(o.app.getAppPath(),e),l=p.join(r,"OCR-D-IMG");for(const s of n){const d=p.parse(s).base,c=p.parse(s).name,f=p.join(l,d);u.copyFileSync(s,f);const y=`docker run --rm -v ${r}:/data -w /data -- ocrd/all:maximum ocrd workspace add -G OCR-D-IMG -i OCR-D-IMG_${c} -g P_${c} -m image/tif OCR-D-IMG/${d}`;require("child_process").execSync(y)}i(!0)})}o.ipcMain.handle("upload-images-to-workspace",async(n,e)=>await T(e.paths,e.workspaceName));o.ipcMain.handle("open-win",(n,e)=>{const i=new o.BrowserWindow({webPreferences:{preload:h,nodeIntegration:!0,contextIsolation:!1}});process.env.VITE_DEV_SERVER_URL?i.loadURL(`${v}#${e}`):i.loadFile(k,{hash:e})});
